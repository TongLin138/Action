import{v as d,N as t,O as n}from"./index-f8002877.js";const{apiUrl:g=""}=d(),p=({path:e},s="message")=>t.get({url:`/file?path=${e}`},{errorMessageMode:s}),c=(e,s="message")=>t.post({url:"/file",data:e,headers:{"Content-Type":n.JSON}},{errorMessageMode:s,formatDate:!1}),u=async({type:e="",isDir:s="",keywords:r="",startTime:o="",endTime:a=""},i="message")=>{const l=await t.get({url:`/file/tree?type=${e}&isDir=${s}&keywords=${r}&startTime=${o}&endTime=${a}`},{errorMessageMode:i});return l.length?e?l.length===1?l[0].children:[]:l:[]},m=async(e,s="message")=>t.get({url:`/file/dir?path=${encodeURIComponent(e)}`},{errorMessageMode:s}),M=(e,s="message")=>t.delete({url:"/file",data:e,headers:{"Content-Type":n.JSON}},{errorMessageMode:s}),h=({path:e},s="message")=>new Promise(async r=>{const o=await t.get({url:`/file/download?path=${e}`,responseType:"blob"},{isReturnNativeResponse:!0,errorMessageMode:s});if(o.headers["content-disposition"])r({code:1,blob:o.data});else{const a=new FileReader;a.readAsText(o.data),a.onload=function(){const i=a.result||"{}";r(JSON.parse(i))}}}),y=(e,s="message")=>t.post({url:"/file/rename",data:e,headers:{"Content-Type":n.JSON}},{errorMessageMode:s}),T=({path:e},s="message")=>t.get({url:`/file/info?path=${e}`},{errorMessageMode:s}),$=(e,s="message")=>t.post({url:"/file/move",data:e,headers:{"Content-Type":n.JSON}},{errorMessageMode:s}),C=(e,s="message")=>t.post({url:"/file/create",data:e,headers:{"Content-Type":n.JSON}},{errorMessageMode:s}),N=({params:e,path:s,onUploadProgress:r})=>t.uploadFile({url:`${g}/file/upload?path=${s}`,onUploadProgress:r,timeout:600*1e3},e);export{p as a,y as b,M as c,h as d,T as e,$ as f,u as g,C as h,N as i,m as j,c as s};
